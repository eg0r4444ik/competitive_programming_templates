static class Matching{
static int[] mt;
  static boolean[] used;
  static Node[] graph;
  
  static class Node{
      int val;
      List<Node> neighbours = new ArrayList<>();
  }

  static void findMatching(){
    Arrays.fill(mt, -1);
    Arrays.fill(used, false);


    for (int i = 0; i < f; i++) {
        if(tryKuhn(graph[i], f)){
            Arrays.fill(used, false);
        };
    }
  }

  static boolean tryKuhn(Node curr, int f){
        if(used[curr.val]){
            return false;
        }
        used[curr.val] = true;
        for(Node node : curr.neighbours){
            int idx = node.val - f;
            if(mt[idx] == -1){
                mt[idx] = curr.val;
                return true;
            }else if(tryKuhn(graph[mt[idx]], f)){
                mt[idx] = curr.val;
                return true;
            }
        }
 
        return false;
    }

}
